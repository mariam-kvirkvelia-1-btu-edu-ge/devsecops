Docker installation
1. wget https://releases.rancher.com/install-docker/20.10.sh
2. sh 20.10.sh
3. sudo apt  install docker.io
4. sudo systemctl start docker
5. sudo systemctl enable docker
6. sudo systemctl status docker



1. git clone git@github
2. docker build -t name .
3. docker run -v /var/run/docker.sock:/var/run/docker.sock -v $HOME/Library/Caches:/root/.cache/ aquasec/trivy:0.47.0 image pre_exam=name
4. 
https://hub.docker.com/_/python









What is DevOps?<<<<<<<<<<<<<<<<<<<<<<<<<<<
DevOps-ის მთავარი მიზანია ავტომატიზირება და გამარტივება
პროგრამული უზრუნველყოფის მიწოდებისა და ინფრასტრუქტურის ცვლილებების პროცესების ავტომატიზირება და გამარტივება, 
რაც გამოიწვევს უფრო სწრაფ და საიმედო განვითარებისა და დანერგვის ციკლებს.

DevOps-ის ძირითადი პრინციპები?<<<<<<<<<<<<<<<<<
პროგრამული უზრუნველყოფის განვითარების სასიცოცხლო ციკლის ავტომატიზაცია. ეს მოიცავს ტესტირების ავტომატიზირებას, შენობებს, გამოშვებას,
განვითარების გარემოს უზრუნველყოფას და სხვა სახელმძღვანელო ამოცანებს, რომლებმაც შეიძლება შეანელონ ან შეიყვანონ ადამიანური შეცდომა პროგრამული უზრუნველყოფის მიწოდების პროცესში.

თანამშრომლობა და კომუნიკაცია. კარგ DevOps გუნდს აქვს ავტომატიზაცია, მაგრამ დიდ DevOps გუნდს ასევე აქვს ეფექტური თანამშრომლობა და კომუნიკაცია.

უწყვეტი გაუმჯობესება და ნარჩენების მინიმიზაცია. განმეორებადი ამოცანების ავტომატიზირებიდან დაწყებული შესრულების მეტრიკის ყურებამდე, 
გამოშვების დროის შემცირების გზების ან აღდგენის საშუალო დროის შესამცირებლად, მაღალი ხარისხის DevOps გუნდები რეგულარულად ეძებენ სფეროებს, რომლებიც შეიძლება გაუმჯობესდეს.

ჰიპერფოკუსირება მომხმარებლის საჭიროებებზე მოკლე უკუკავშირის მარყუჟებით. ავტომატიზაციის, გაუმჯობესებული კომუნიკაციისა და თანამშრომლობის მეშვეობით და
მუდმივი გაუმჯობესება, DevOps-ის გუნდებს შეუძლიათ გარკვეული მომენტი დაუთმონ და ფოკუსირება მოახდინონ იმაზე, თუ რა სურთ რეალურ მომხმარებლებს და როგორ მისცენ ეს მათ.

DevOps-ის ოთხი ფაზა<<<<<<<<<<<<<<<<<
ფაზა 1: შემოიტანეთ თქვენი საკუთარი DevOps ფაზაში Bring Your Own DevOps, თითოეულმა გუნდმა 
შეარჩია საკუთარი თულები. ამ მიდგომამ გამოიწვია პრობლემები, როდესაც გუნდები ცდილობდნენ 
ერთად იმუშაონ, რადგან ისინი არ იცნობდნენ სხვა გუნდების ინსტრუმენტებს.

ფაზა 2: Best-in-class DevOps განსხვავებული ინსტრუმენტების გამოყენების გამოწვევების გადასაჭრელად, 
ორგანიზაციები გადავიდნენ მეორე ფაზაში, Best-in-class DevOps. ამ ფაზაში, ორგანიზაციები 
სტანდარტიზებულია ინსტრუმენტების ერთსა და იმავე კომპლექტზე, DevOps-ის სასიცოცხლო 
ციკლის თითოეული ეტაპისთვის ერთი სასურველი ხელსაწყოთი. 
ის დაეხმარა გუნდებს ერთმანეთთან თანამშრომლობაში, მაგრამ შემდეგ პრობლემა გახდა პროგრამული 
ცვლილებების გადატანა ინსტრუმენტების მეშვეობით თითოეული ეტაპისთვის.



